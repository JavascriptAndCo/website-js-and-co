"""
Direct the client to resolve this field locally, either from the cache or local resolvers.
"""
directive @client(
  """
  When true, the client will never use the cache for this value. See
  https://www.apollographql.com/docs/react/essentials/local-state/#forcing-resolvers-with-clientalways-true
  """
  always: Boolean
) on FIELD | FRAGMENT_DEFINITION | INLINE_FRAGMENT

"""
Export this locally resolved field as a variable to be used in the remainder of this query. See
https://www.apollographql.com/docs/react/essentials/local-state/#using-client-fields-as-variables
"""
directive @export(
  """The variable name to export this field as."""
  as: String!
) on FIELD

"""
Specify a custom store key for this result. See
https://www.apollographql.com/docs/react/advanced/caching/#the-connection-directive
"""
directive @connection(
  """Specify the store key."""
  key: String!

  """
  An array of query argument names to include in the generated custom store key.
  """
  filter: [String!]
) on FIELD

type About {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  aboutUs: ComponentContentAboutUs
  published_at: DateTime
}

input AboutInput {
  aboutUs: ComponentContentAboutUsInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

input CardInput {
  Action_Card: [ComponentCardsActionCardInput]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type Cards {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Action_Card: [ComponentCardsActionCard]
  published_at: DateTime
}

type CardsAggregator {
  count: Int
  totalCount: Int
}

type CardsConnection {
  values: [Cards]
  groupBy: CardsGroupBy
  aggregate: CardsAggregator
}

type CardsConnectionCreated_at {
  key: DateTime
  connection: CardsConnection
}

type CardsConnectionId {
  key: ID
  connection: CardsConnection
}

type CardsConnectionPublished_at {
  key: DateTime
  connection: CardsConnection
}

type CardsConnectionUpdated_at {
  key: DateTime
  connection: CardsConnection
}

type CardsGroupBy {
  id: [CardsConnectionId]
  created_at: [CardsConnectionCreated_at]
  updated_at: [CardsConnectionUpdated_at]
  published_at: [CardsConnectionPublished_at]
}

type ComponentCardsActionCard {
  id: ID!
  title: String!
  text: String!
  icon: UploadFile
}

input ComponentCardsActionCardInput {
  title: String!
  text: String!
  icon: ID
}

type ComponentCardsDesEntrepreneursCard {
  id: ID!
  title: String
  text: String
  icon: UploadFile
}

input ComponentCardsDesEntrepreneursCardInput {
  title: String
  text: String
  icon: ID
}

type ComponentCardsDesFormationsCard {
  id: ID!
  title: String
  text: String
  icon: UploadFile
}

input ComponentCardsDesFormationsCardInput {
  title: String
  text: String
  icon: ID
}

type ComponentCardsEventCard {
  id: ID!
  name: String
  place: String
  adresse: String
  date: Date
  description: String
  image: UploadFile
  link_register: String
  hour: Time
}

input ComponentCardsEventCardInput {
  name: String
  place: String
  adresse: String
  date: Date
  description: String
  image: ID
  link_register: String
  hour: Time
}

type ComponentCardsMemberSocialMediaCard {
  id: ID!
  name: String
  link: String
  icon: UploadFile
}

input ComponentCardsMemberSocialMediaCardInput {
  name: String
  link: String
  icon: ID
}

type ComponentCardsPartnerCard {
  id: ID!
  name: String
  description: String
  link: String
  logo: UploadFile
}

input ComponentCardsPartnerCardInput {
  name: String
  description: String
  link: String
  logo: ID
}

type ComponentCardsSocialMedia {
  id: ID!
  name: String
  link: String
  icon: UploadFile
}

input ComponentCardsSocialMediaInput {
  name: String
  link: String
  icon: ID
}

type ComponentCardsUneExpertiseCard {
  id: ID!
  title: String
  text: String
  Icon: UploadFile
}

input ComponentCardsUneExpertiseCardInput {
  title: String
  text: String
  Icon: ID
}

type ComponentCardsUnReseauxCard {
  id: ID!
  title: String
  text: String
  icon: UploadFile
}

input ComponentCardsUnReseauxCardInput {
  title: String
  text: String
  icon: ID
}

type ComponentContentAboutUs {
  id: ID!
  title_1: String
  text: String
  text2: String
  unReseau: ComponentCardsUnReseauxCard
  uneExpertise: ComponentCardsUneExpertiseCard
  desEntrepreneurs: ComponentCardsDesEntrepreneursCard
  desFormations: ComponentCardsDesFormationsCard
}

input ComponentContentAboutUsInput {
  title_1: String
  text: String
  text2: String
  unReseau: ComponentCardsUnReseauxCardInput
  uneExpertise: ComponentCardsUneExpertiseCardInput
  desEntrepreneurs: ComponentCardsDesEntrepreneursCardInput
  desFormations: ComponentCardsDesFormationsCardInput
}

input ComponentContentActionInput {
  title: String
  text: String
  action_cards: [ComponentCardsActionCardInput]
}

type ComponentContentActions {
  id: ID!
  title: String
  text: String
  action_cards: [ComponentCardsActionCard]
}

type ComponentContentActus {
  id: ID!
  title_1: String!
  title_2: String!
  text: String!
  events: [ComponentCardsEventCard]
}

input ComponentContentActusInput {
  title_1: String!
  title_2: String!
  text: String!
  events: [ComponentCardsEventCardInput]
}

input ComponentContentMemberInput {
  title: String
  text: String
}

type ComponentContentMembers {
  id: ID!
  title: String
  text: String
}

type ComponentContentNewMember {
  id: ID!
  title_1: String
  text: String
}

input ComponentContentNewMemberInput {
  title_1: String
  text: String
}

input ComponentContentOurMemberInput {
  firstName: String
  lastName: String
  function: String
  linkPortfolio: String
  description: String
  avatar: ID
  socialMedia: [ComponentCardsMemberSocialMediaCardInput]
}

type ComponentContentOurMembers {
  id: ID!
  firstName: String
  lastName: String
  function: String
  linkPortfolio: String
  description: String
  avatar: UploadFile
  socialMedia: [ComponentCardsMemberSocialMediaCard]
}

input ComponentContentPartnerInput {
  title_1: String
  text: String
  partners: [ComponentCardsPartnerCardInput]
}

type ComponentContentPartners {
  id: ID!
  title_1: String
  text: String
  partners: [ComponentCardsPartnerCard]
}

type ComponentContentSocialMedia {
  id: ID!
  title_1: String
  text: String
  title_2: String
  icons: [ComponentCardsSocialMedia]
}

input ComponentContentSocialMediaInput {
  title_1: String
  text: String
  title_2: String
  icons: [ComponentCardsSocialMediaInput]
}

type Content {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  actu: ComponentContentActus
  action: ComponentContentActions
  socialMedia: ComponentContentSocialMedia
  newMember: ComponentContentNewMember
  partners: ComponentContentPartners
  published_at: DateTime
}

input ContentInput {
  actu: ComponentContentActusInput
  action: ComponentContentActionInput
  socialMedia: ComponentContentSocialMediaInput
  newMember: ComponentContentNewMemberInput
  partners: ComponentContentPartnerInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createCardInput {
  data: CardInput
}

type createCardPayload {
  card: Cards
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

scalar Date

scalar DateTime

type deleteAboutPayload {
  about: About
}

input deleteCardInput {
  where: InputID
}

type deleteCardPayload {
  card: Cards
}

type deleteContentPayload {
  content: Content
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type deleteMemberPayload {
  member: Members
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editAboutInput {
  aboutUs: editComponentContentAboutUsInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editCardInput {
  Action_Card: [editComponentCardsActionCardInput]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editComponentCardsActionCardInput {
  id: ID
  title: String
  text: String
  icon: ID
}

input editComponentCardsDesEntrepreneursCardInput {
  id: ID
  title: String
  text: String
  icon: ID
}

input editComponentCardsDesFormationsCardInput {
  id: ID
  title: String
  text: String
  icon: ID
}

input editComponentCardsEventCardInput {
  id: ID
  name: String
  place: String
  adresse: String
  date: Date
  description: String
  image: ID
  link_register: String
  hour: Time
}

input editComponentCardsMemberSocialMediaCardInput {
  id: ID
  name: String
  link: String
  icon: ID
}

input editComponentCardsPartnerCardInput {
  id: ID
  name: String
  description: String
  link: String
  logo: ID
}

input editComponentCardsSocialMediaInput {
  id: ID
  name: String
  link: String
  icon: ID
}

input editComponentCardsUneExpertiseCardInput {
  id: ID
  title: String
  text: String
  Icon: ID
}

input editComponentCardsUnReseauxCardInput {
  id: ID
  title: String
  text: String
  icon: ID
}

input editComponentContentAboutUsInput {
  id: ID
  title_1: String
  text: String
  text2: String
  unReseau: editComponentCardsUnReseauxCardInput
  uneExpertise: editComponentCardsUneExpertiseCardInput
  desEntrepreneurs: editComponentCardsDesEntrepreneursCardInput
  desFormations: editComponentCardsDesFormationsCardInput
}

input editComponentContentActionInput {
  id: ID
  title: String
  text: String
  action_cards: [editComponentCardsActionCardInput]
}

input editComponentContentActusInput {
  id: ID
  title_1: String
  title_2: String
  text: String
  events: [editComponentCardsEventCardInput]
}

input editComponentContentMemberInput {
  id: ID
  title: String
  text: String
}

input editComponentContentNewMemberInput {
  id: ID
  title_1: String
  text: String
}

input editComponentContentOurMemberInput {
  id: ID
  firstName: String
  lastName: String
  function: String
  linkPortfolio: String
  description: String
  avatar: ID
  socialMedia: [editComponentCardsMemberSocialMediaCardInput]
}

input editComponentContentPartnerInput {
  id: ID
  title_1: String
  text: String
  partners: [editComponentCardsPartnerCardInput]
}

input editComponentContentSocialMediaInput {
  id: ID
  title_1: String
  text: String
  title_2: String
  icons: [editComponentCardsSocialMediaInput]
}

input editContentInput {
  actu: editComponentContentActusInput
  action: editComponentContentActionInput
  socialMedia: editComponentContentSocialMediaInput
  newMember: editComponentContentNewMemberInput
  partners: editComponentContentPartnerInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editLocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

input editMemberInput {
  intro: editComponentContentMemberInput
  members: editComponentContentOurMemberInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

type I18NLocale {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  code: String
}

input InputID {
  id: ID!
}

scalar JSON

input LocaleInput {
  name: String
  code: String
  created_by: ID
  updated_by: ID
}

scalar Long

input MemberInput {
  intro: ComponentContentMemberInput
  members: ComponentContentOurMemberInput
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

type Members {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  intro: ComponentContentMembers
  members: ComponentContentOurMembers
  published_at: DateTime
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | About | updateAboutPayload | deleteAboutPayload | Cards | CardsConnection | CardsAggregator | CardsGroupBy | CardsConnectionId | CardsConnectionCreated_at | CardsConnectionUpdated_at | CardsConnectionPublished_at | createCardPayload | updateCardPayload | deleteCardPayload | Content | updateContentPayload | deleteContentPayload | Members | updateMemberPayload | deleteMemberPayload | I18NLocale | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentCardsActionCard | ComponentCardsDesEntrepreneursCard | ComponentCardsDesFormationsCard | ComponentCardsEventCard | ComponentCardsMemberSocialMediaCard | ComponentCardsPartnerCard | ComponentCardsSocialMedia | ComponentCardsUnReseauxCard | ComponentCardsUneExpertiseCard | ComponentContentAboutUs | ComponentContentActions | ComponentContentActus | ComponentContentMembers | ComponentContentNewMember | ComponentContentOurMembers | ComponentContentPartners | ComponentContentSocialMedia

type Mutation {
  updateAbout(input: updateAboutInput): updateAboutPayload
  deleteAbout: deleteAboutPayload
  createCard(input: createCardInput): createCardPayload
  updateCard(input: updateCardInput): updateCardPayload
  deleteCard(input: deleteCardInput): deleteCardPayload
  updateContent(input: updateContentInput): updateContentPayload
  deleteContent: deleteContentPayload
  updateMember(input: updateMemberInput): updateMemberPayload
  deleteMember: deleteMemberPayload
  deleteFile(input: deleteFileInput): deleteFilePayload
  createRole(input: createRoleInput): createRolePayload
  updateRole(input: updateRoleInput): updateRolePayload
  deleteRole(input: deleteRoleInput): deleteRolePayload
  createUser(input: createUserInput): createUserPayload
  updateUser(input: updateUserInput): updateUserPayload
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  about(publicationState: PublicationState): About
  card(id: ID!, publicationState: PublicationState): Cards
  cards(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Cards]
  cardsConnection(sort: String, limit: Int, start: Int, where: JSON): CardsConnection
  content(publicationState: PublicationState): Content
  member(publicationState: PublicationState): Members
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

scalar Time

input updateAboutInput {
  data: editAboutInput
}

type updateAboutPayload {
  about: About
}

input updateCardInput {
  where: InputID
  data: editCardInput
}

type updateCardPayload {
  card: Cards
}

input updateContentInput {
  data: editContentInput
}

type updateContentPayload {
  content: Content
}

input updateMemberInput {
  data: editMemberInput
}

type updateMemberPayload {
  member: Members
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}
